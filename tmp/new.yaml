apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-app-status-script
  namespace: argocd
data:
  get-argocd-app-status.sh: |
    #!/bin/bash

    # Label to filter applications
    #LABEL_SELECTOR="for=jpmc"

    # Get the list of Argo CD applications with the specific label using kubectl
    applications=$(kubectl get applications.argoproj.io -o jsonpath='{.items[*].metadata.name}' -n argocd)
    #applications=$(kubectl get applications.argoproj.io -l $LABEL_SELECTOR -o jsonpath='{.items[*].metadata.name}')
    #applications=$(cat /other-scripts/applicationlist)
    if [ -z "$applications" ]; then
      echo "No applications found with label: $LABEL_SELECTOR"
      exit 1
    fi
    echo $applications
    echo
    # Loop through each application and get the health and sync status
    echo "Application Name | Health Status | Sync Status"
    echo "------------------------------------------------"

    for app in $applications; do
      # Fetch health and sync status using kubectl
      health_status=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.health.status}')
      sync_status=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.sync.status}')
      
      # Display the results
      echo "$app | $health_status | $sync_status"
    done

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-app-read-role
  namespace: argocd  # The namespace where Argo CD is installed
rules:
  - apiGroups: ["argoproj.io"]
    resources: ["applications"]
    verbs: ["get", "list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-app-status-sa
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-app-read-rolebinding
  namespace: argocd  # The namespace where Argo CD is installed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-app-read-role
subjects:
  - kind: ServiceAccount
    name: argocd-app-status-sa
    namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-app-status-job
  namespace: argocd
spec:
  template:
    spec:
      serviceAccountName: argocd-app-status-sa  # Use the ServiceAccount with permissions
      containers:
      - name: argocd-app-status
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/scripts/get-argocd-app-status.sh"]
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
          readOnly: true
      restartPolicy: Never
      volumes:
      - name: script-volume
        configMap:
          name: argocd-app-status-script
          items:
            - key: get-argocd-app-status.sh
              path: get-argocd-app-status.sh            
  backoffLimit: 1
